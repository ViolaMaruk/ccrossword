import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, TextInput, Button, ImageBackground, ScrollView, TouchableOpacity, Alert } from 'react-native';

// Symulacja importu t≈Ça. ZastƒÖp to ≈õcie≈ºkƒÖ do Twojego obrazu.
// const background = require('../assets/background.jpg');

// Typy dla p√≥l input
type InputValue = number | null;

const MultiplicationTrainerScreen = () => {
    // --- Stany zadania (Poprawne warto≈õci) ---
    const [number, setNumber] = useState<number>(0);
    const [other, setOther] = useState<number>(0);
    const [tens, setTens] = useState<number>(0); // Np. 30 dla 34
    const [ones, setOnes] = useState<number>(0);   // Np. 4 dla 34
    const [correctPart1, setCorrectPart1] = useState<number>(0); // np. 30 * 7
    const [correctPart2, setCorrectPart2] = useState<number>(0); // np. 4 * 7
    const [correctFinal, setCorrectFinal] = useState<number>(0);

    // --- Stany wej≈õcia u≈ºytkownika ---
    const [userTens, setUserTens] = useState<InputValue>(null);
    const [userOnes, setUserOnes] = useState<InputValue>(null);
    const [userPart1, setUserPart1] = useState<InputValue>(null);
    const [userPart2, setUserPart2] = useState<InputValue>(null);
    const [userFinal, setUserFinal] = useState<InputValue>(null);

    // --- Stany UI/Feedback ---
    const [isAwaitingNext, setIsAwaitingNext] = useState<boolean>(false);
    const [resultMessage, setResultMessage] = useState<string>('');

    // --- Stats (dla pe≈Çnej analogii z wersjƒÖ webowƒÖ) ---
    const [correctCount, setCorrectCount] = useState<number>(0);
    const [totalCount, setTotalCount] = useState<number>(0);
    const [streak, setStreak] = useState<number>(0);
    const [minNumber, setMinNumber] = useState<number>(10);
    const [maxNumber, setMaxNumber] = useState<number>(49);

    // U≈ºywamy ref√≥w dla lepszego zarzƒÖdzania fokusem na wej≈õciach
    const inputRefs = {
        userTens: useRef<TextInput>(null),
        userOnes: useRef<TextInput>(null),
        userPart1: useRef<TextInput>(null),
        userPart2: useRef<TextInput>(null),
        userFinal: useRef<TextInput>(null),
    };

    const generateNumbers = (min: number, max: number) => {
        const n = Math.floor(Math.random() * (max - min + 1)) + min;
        const o = Math.floor(Math.random() * 9) + 1;

        setNumber(n);
        setOther(o);

        const t = Math.floor(n / 10) * 10;
        const s = n % 10;
        setTens(t);
        setOnes(s);

        const cp1 = t * o;
        const cp2 = s * o;
        setCorrectPart1(cp1);
        setCorrectPart2(cp2);
        setCorrectFinal(cp1 + cp2);
    };

    const nextTask = (min: number = minNumber, max: number = maxNumber) => {
        // Reset p√≥l wej≈õciowych
        setUserTens(null);
        setUserOnes(null);
        setUserPart1(null);
        setUserPart2(null);
        setUserFinal(null);
        setResultMessage('');
        setIsAwaitingNext(false);

        generateNumbers(min, max);

        // Ustawienie fokusu na pierwszym polu
        setTimeout(() => inputRefs.userTens.current?.focus(), 100);
    };

    useEffect(() => {
        nextTask(minNumber, maxNumber);
    }, [minNumber, maxNumber]); // U≈ºywamy min/maxNumber do automatycznego ≈Çadowania zadania

    // Funkcja pomocnicza do pobierania stylu walidacji
    const getValidationStyle = (userInput: InputValue, correctValue: number) => {
        if (userInput === null) return styles.input;
        return [styles.input, userInput === correctValue ? styles.correct : styles.error];
    };

    // Funkcja obs≈ÇugujƒÖca zmianƒô tekstu w TextInput
    const handleTextChange = (text: string, setter: (value: InputValue) => void) => {
        const num = text === '' ? null : Number(text);
        if (text === '' || !isNaN(num!)) { // Sprawdzanie, czy to puste lub liczba
            setter(num);
        }
    };

    const handleAction = () => {
        if (isAwaitingNext) {
            nextTask();
        } else {
            check();
        }
    };

    const check = () => {
        // Zliczanie b≈Çƒôd√≥w
        const errors: string[] = [];
        let ok = true;

        if (userTens !== tens) { ok = false; errors.push('dziesiƒÖtki'); }
        if (userOnes !== ones) { ok = false; errors.push('jedno≈õci'); }
        if (userPart1 !== correctPart1) { ok = false; errors.push('czƒô≈õƒá 1'); }
        if (userPart2 !== correctPart2) { ok = false; errors.push('czƒô≈õƒá 2'); }
        if (userFinal !== correctFinal) { ok = false; errors.push('wynik ko≈Ñcowy'); }

        setTotalCount(prev => prev + 1);

        if (ok) {
            setCorrectCount(prev => prev + 1);
            setStreak(prev => prev + 1);
            setResultMessage(`Brawo! üéâ Poprawna odpowied≈∫: ${correctFinal}`);

            setIsAwaitingNext(true);

            if ((streak + 1) % 5 === 0 && maxNumber < 99) {
                Alert.alert(
                    "Brawo! üß†",
                    "Chcesz przej≈õƒá do poziomu 50-99?",
                    [
                        { text: "NIE", onPress: () => nextTask() },
                        { text: "TAK", onPress: () => { setMinNumber(50); setMaxNumber(99); nextTask(50, 99); } }
                    ],
                    { cancelable: false }
                );
            }

        } else {
            setStreak(0);
            setResultMessage(`B≈ÇƒÖd w: ${errors.join(", ")}. Spr√≥buj ponownie!`);
        }
    };

    // Obliczenia statystyk do wy≈õwietlenia
    const accuracy = totalCount > 0 ? Math.round((correctCount / totalCount) * 100) : 0;
    const buttonTitle = isAwaitingNext ? 'Nastƒôpny przyk≈Çad ‚Üí' : 'Sprawd≈∫';
    const resultStyle = resultMessage.startsWith('Brawo') ? styles.correctText : styles.errorText;

    return (
        // U≈ºywamy pustej View/ScrollView zamiast ImageBackground, je≈õli obrazka nie ma
        // lub je≈õli chcemy upro≈õciƒá. W tym przyk≈Çadzie zak≈Çadamy, ≈ºe background.jpg istnieje
        <ImageBackground style={styles.background}>
            <ScrollView contentContainerStyle={styles.container}>
                <View style={styles.card}>
                    <Text style={styles.title}>üßÆ Trener Mno≈ºenia</Text>

                    <Text style={styles.task}>{number} √ó {other} = ?</Text>

                    <View style={styles.mainNumberContainer}>
                        <Text style={styles.mainNumberLabel}>Liczba do roz≈Ço≈ºenia:</Text>
                        <Text style={styles.mainNumber}>{number}</Text>
                    </View>

                    {/* --- Krok 1: Rozk≈Çad na dziesiƒÖtki i jedno≈õci --- */}
                    <View style={styles.row}>
                        <View style={styles.block}>
                            <Text style={styles.label}>DziesiƒÖtki ({tens})</Text>
                            <TextInput
                                ref={inputRefs.userTens}
                                style={getValidationStyle(userTens, tens)}
                                keyboardType="numeric"
                                value={userTens !== null ? String(userTens) : ''}
                                onChangeText={t => handleTextChange(t, setUserTens)}
                                onSubmitEditing={() => inputRefs.userOnes.current?.focus()}
                            />
                        </View>
                        <View style={styles.operatorBlock}>
                            <Text style={styles.operatorText}>√ó</Text>
                            <Text style={styles.operatorText}>{other}</Text>
                        </View>
                        <View style={styles.block}>
                            <Text style={styles.label}>Jedno≈õci ({ones})</Text>
                            <TextInput
                                ref={inputRefs.userOnes}
                                style={getValidationStyle(userOnes, ones)}
                                keyboardType="numeric"
                                value={userOnes !== null ? String(userOnes) : ''}
                                onChangeText={t => handleTextChange(t, setUserOnes)}
                                onSubmitEditing={() => inputRefs.userPart1.current?.focus()}
                            />
                        </View>
                    </View>

                    {/* --- Krok 2: Wyniki czƒô≈õciowe (Part1 + Part2) --- */}
                    <Text style={styles.intermediateLabel}>Wyniki czƒô≈õciowe ({other} √ó ...) </Text>
                    <View style={styles.partRow}>
                        <TextInput
                            ref={inputRefs.userPart1}
                            style={getValidationStyle(userPart1, correctPart1)}
                            keyboardType="numeric"
                            placeholder={`(${tens} √ó ${other})`}
                            value={userPart1 !== null ? String(userPart1) : ''}
                            onChangeText={t => handleTextChange(t, setUserPart1)}
                            onSubmitEditing={() => inputRefs.userPart2.current?.focus()}
                        />
                        <Text style={styles.partOperator}>+</Text>
                        <TextInput
                            ref={inputRefs.userPart2}
                            style={getValidationStyle(userPart2, correctPart2)}
                            keyboardType="numeric"
                            placeholder={`(${ones} √ó ${other})`}
                            value={userPart2 !== null ? String(userPart2) : ''}
                            onChangeText={t => handleTextChange(t, setUserPart2)}
                            onSubmitEditing={() => inputRefs.userFinal.current?.focus()}
                        />
                    </View>

                    {/* --- Krok 3: Wynik ko≈Ñcowy --- */}
                    <Text style={styles.finalLabel}>Wynik ko≈Ñcowy</Text>
                    <TextInput
                        ref={inputRefs.userFinal}
                        style={getValidationStyle(userFinal, correctFinal)}
                        keyboardType="numeric"
                        placeholder="Wynik"
                        value={userFinal !== null ? String(userFinal) : ''}
                        onChangeText={t => handleTextChange(t, setUserFinal)}
                        onSubmitEditing={handleAction}
                    />

                    <View style={styles.buttonContainer}>
                        <Button
                            title={buttonTitle}
                            onPress={handleAction}
                            color="#007bff"
                        />
                    </View>

                    {resultMessage ? (
                        <Text style={[styles.result, resultStyle]}>{resultMessage}</Text>
                    ) : null}

                    <Text style={styles.stats}>
                        Poprawnych: {correctCount}/{totalCount} ({accuracy}%), Poziom: {minNumber}-{maxNumber}
                    </Text>
                </View>
            </ScrollView>
        </ImageBackground>
    );
};

const styles = StyleSheet.create({
    background: { flex: 1, resizeMode: 'cover', backgroundColor: '#f0f0f0' }, // Dodane t≈Ço zastƒôpcze
    container: { flexGrow: 1, justifyContent: 'center', alignItems: 'center', padding: 20 },
    card: {
        backgroundColor: 'rgba(255,255,255,0.95)',
        borderRadius: 15,
        padding: 20,
        width: '100%',
        maxWidth: 500,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 5,
    },
    title: { fontSize: 24, fontWeight: 'bold', marginBottom: 15, color: '#333' },
    task: { fontSize: 30, fontWeight: 'bold', marginVertical: 10, color: '#007bff' },

    // Liczba do roz≈Ço≈ºenia
    mainNumberContainer: { flexDirection: 'row', alignItems: 'center', marginBottom: 10 },
    mainNumberLabel: { fontSize: 18, marginRight: 5, fontWeight: 'normal' },
    mainNumber: { fontSize: 22, fontWeight: 'bold', color: '#000' },

    // Krok 1 (Rozk≈Çad)
    row: { flexDirection: 'row', justifyContent: 'space-between', width: '90%', marginVertical: 15 },
    block: { alignItems: 'center', flex: 1 },
    operatorBlock: { justifyContent: 'center', alignItems: 'center', paddingHorizontal: 10 },
    operatorText: { fontSize: 24, fontWeight: 'bold' },
    label: { fontSize: 16, marginBottom: 5, color: '#555' },

    // Krok 2 (Czƒô≈õciowe)
    intermediateLabel: { fontSize: 16, marginTop: 15, color: '#555' },
    partRow: { flexDirection: 'row', justifyContent: 'center', alignItems: 'center', width: '80%', marginVertical: 10 },
    partOperator: { fontSize: 24, fontWeight: 'bold', marginHorizontal: 10 },

    // Krok 3 (Wynik ko≈Ñcowy)
    finalLabel: { fontSize: 16, marginTop: 15, color: '#555' },

    // Inputy
    input: {
        width: '100%',
        minWidth: 80,
        height: 45,
        borderWidth: 2,
        borderColor: '#aaa',
        borderRadius: 8,
        textAlign: 'center',
        fontSize: 20,
        backgroundColor: '#fff',
        paddingHorizontal: 5,
    },
    correct: { backgroundColor: '#d4edda', borderColor: 'green' },
    error: { backgroundColor: '#f8d7da', borderColor: 'red' },

    // Wiadomo≈õƒá i statystyki
    buttonContainer: { width: '80%', marginTop: 20, marginBottom: 10 },
    result: { fontSize: 20, fontWeight: 'bold', marginTop: 10, textAlign: 'center' },
    correctText: { color: 'green' },
    errorText: { color: 'red' },
    stats: { marginTop: 15, fontSize: 14, color: '#666', fontWeight: 'bold' },
});

export default MultiplicationTrainerScreen;
